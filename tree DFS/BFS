#include <bits/stdc++.h>
using namespace std;
typedef long long int ll;

struct tree{
      int data;
      tree* left=NULL;
      tree* right=NULL;

      tree(int val){
          data=val;
          left=right=NULL;         //constructor
      }

};
                                   
void preorder(tree* root){
    if(root==NULL)return;

    cout<<root->data<<" ";         //reccursive preorder
    preorder(root->left);
    preorder(root->right);
}

void inorder(tree* root){
    if(root==NULL)return;

    inorder(root->left);          //reccursive inorder
    cout<<root->data<<" ";
    inorder(root->right);
}

void postorder(tree* root){
    if(root==NULL)return;

    postorder(root->left);          //reccursive postorder
    postorder(root->right);
    cout<<root->data<<" ";
}

void levelorder(tree* root){
    queue<tree*>q;
    if(root==NULL)return;
    q.push(root);
    while(!q.empty()){
         
        tree* node=q.front();        //reccursive levelorder
        q.pop();
        cout<<node->data<<" ";
        if(node->left!=NULL)q.push(node->left);
        if(node->right!=NULL)q.push(node->right);
    }


}

void iterpre(tree* root){
    stack<tree*>st;
    if(root==NULL)return; 
    st.push(root);
    while(!st.empty()){
        tree* node=st.top();         //iterative preorder    T-O(N)  S-O(N)
        st.pop();
        cout<<node->data<<" ";
        if(node->right!=NULL)st.push(node->right);
        if(node->left!=NULL)st.push(node->left);
    }
}

void iterin(tree* root){
    stack<tree*>st;
    tree* node=root;
    while(true){
        if(node!=NULL){;
        st.push(node);
        node=node->left;
    }
    else{
        if(st.empty()==true)break;      //iterative inorder   T-O(N)  S-O(N)/O(H)
        node=st.top();
        st.pop();
        cout<<node->data<<" ";
        node=node->right;
    }  
  }
}

void iterpost(tree* root){
    if(root==NULL)return;
    stack<tree*>st1,st2;
    st1.push(root);
    while(!st1.empty()){
        root=st1.top();                //iterative postorder  T-O(N)  S-O(N+N)  using two stacks
        st1.pop();
        st2.push(root);
        if(root->left!=NULL)st1.push(root->left);
        if(root->right!=NULL)st1.push(root->right);
    }
    while(!st2.empty()){
        cout<<st2.top()->data<<" ";
        st2.pop();
    }
}

void iterpost2(tree* root){
    if(root==NULL)return;
    stack<tree*>st;
    tree* curr=root;
    while(curr!=NULL || !st.empty()){
        if(curr!=NULL){
            st.push(curr);
            curr=curr->left;
        }
        else{
             tree* temp=st.top()->right;   //iterative postorder T-O(N)  S-O(N)  using one stack
            if (temp == NULL) {
                    temp = st.top();
                    st.pop(); 
                    cout<<temp->data<<" ";
                    while (!st.empty() && temp == st.top()->right) {
                        temp = st.top();
                        st.pop(); 
                        cout<<temp->data<<" ";
                    }
                } else {
                    curr = temp;
                }
        }
    }
}


int main()
{
 tree* root=new tree(1);
 root->left=new tree(2);
 root->right=new tree(3);
 root->left->right=new tree(5);
 
 //preorder(root);
 //inorder(root);
 //postorder(root);
 //levelorder(root);
 //iterpre(root);
 //iterin(root);
 //iterpost(root);
 //iterpost2(root);
 return 0;    
}
